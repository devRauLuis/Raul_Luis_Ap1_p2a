@page "/registro-empacados"
@page "/registro-empacados/{ProductosEmpacadosId:int}"

<EditForm Model="_productoEmpacado" OnValidSubmit="@Guardar">
    <DataAnnotationsValidator/>
    <div class="card shadow-lg">
        <div class="card-header">
            <h1 class="card-title">Registro de productos empacados</h1>
        </div>
        <div class="card-body">
            <div class="list-group-item pb-3">
                <ValidationSummary/>
                <div class="form-group col-3">
                    <label>Producto Id</label>
                    <div class="input-group">
                        <InputNumber @bind-Value="ProductosEmpacadosId" class="form-control col-4"/>
                        <div class="input-group-append">
                            <button class="btn btn-primary input-group-text" @onclick="BuscarClick" type='button'>
                                Buscar
                            </button>
                        </div>
                    </div>
                </div>
                <div class="form-group mt-3 col-3">
                    <label for="fecha" class="form-label">Fecha</label>
                    <div class="input-group">
                        <InputDate id="fecha-expiracion" class="form-control" @bind-Value="_productoEmpacado.Fecha"/>
                    </div>
                    <ValidationMessage For="@(() => _productoEmpacado.Fecha)"/>
                </div>
                <div class="form-group mt-3">
                    <label for="concepto" class="form-label">Concepto</label>
                    <InputText id="concepto" @bind-Value="_productoEmpacado.Concepto" class="form-control"/>
                    <ValidationMessage For="@(() => _productoEmpacado.Concepto)"/>
                </div>
            </div>
            <div class="list-group-item pt-4 pb-3">
                <h3 class="">Utilizados</h3>
                <div class="d-flex align-items-end justify-content-between w-50">
                    <div class="form-group mt-3 w-50">
                        <label for="producto-utilizado" class="form-label">Producto</label>
                        <select id="producto-utilizado" @bind="_pdpUtilizadoId" class="form-control">
                            <option disabled value='0'>Seleccione un producto</option>
                            @foreach (var pdp in _productoDetallesPresentacionList)
                            {
                                <option value="@pdp.ProductoDetallesId">
                                    @pdp.Descripcion @(pdp.Peso)gr -
                                    @pdp.ExistenciaEmpacada disponibles
                                </option>
                            }
                        </select>

                    </div>
                    <div class="form-group mt-3 w-15">
                        <label for="cantidad" class="form-label">Cantidad</label>
                        <InputNumber @bind-Value="@_cantidadPdpUtilizado" class="form-control"/>
                    </div>
                    <button type="button" @onclick='AgregarUtilizado' class="btn btn-primary ms-2">Agregar</button>
                </div>
                <table class="table table-bordered table-light table-striped mt-3">
                    <thead>
                    <tr>
                        <th>Producto ID</th>
                        <th>Descripcion</th>
                        <th>Cantidad Utilizada</th>
                    </tr>
                    </thead>
                    <tbody>
                    @if (_productoEmpacado.Utilizados is not null)
                    {
                        @foreach (var utilizado in _productoEmpacado.Utilizados)
                        {
                            <tr>
                                <td>
                                    @utilizado.ProductoDetallesId
                                </td>
                                <td>
                                    @BuscarProductoDetalleDescripcion(utilizado.ProductoDetallesId)
                                </td>
                                <td>
                                    @utilizado.CantidadUtilizada
                                </td>
                                <td>
                                    <span class="oi oi-trash text-danger mx-auto" aria-hidden='true' title='delete'
                                          @onclick='args => EliminarUtilizado(utilizado)'/>
                                </td>
                            </tr>
                        }
                    }
                    </tbody>
                </table>
                <div class="form-group mt-3 w-15">
                    <label for="cantidad" class="form-label">Peso total</label>
                    <div class="input-group">
                        <input disabled type="number" @bind="_pesoTotal" class="form-control"/>
                        <span class="input-group-text">gr</span>

                    </div>
                </div>
            </div>
            <div class="list-group-item pt-4 pb-3">
                <h3 class="">Producido</h3>
                <div class="d-flex align-items-end justify-content-between w-30">
                    <div class="form-group mt-3">
                        <label for="producto-producido" class="form-label">Producto</label>
                        <select id="producto-producido" @bind="_producidoId" class="form-control">
                            <option disabled value='0'>Seleccione un producto</option>
                            @foreach (var p in _productosList)
                            {
                                <option value="@p.ProductoId">
                                    @p.Descripcion @(p.Peso)gr -
                                    @(p.Existencia > 0 ? p.Existencia : 0) disponibles
                                </option>
                            }
                        </select>
                    </div>
                    <div class="form-group mt-3 ms-3 w-20">
                        <label for="cantidad" class="form-label">Cantidad</label>
                        <input type="number" @bind="@_cantidadProducido" class="form-control"/>
                    </div>
                </div>
            </div>
        </div>

        <div class="card-footer">
            <button type="button" class="btn btn-primary mt-4" @onclick="Nuevo">Nuevo</button>
            <button class="btn btn-success mt-4" type='submit'>Guardar</button>
            <button type="button" class="btn btn-danger mt-4" @onclick="Eliminar">Eliminar</button>
        </div>
    </div>
</EditForm>


@code {

    [Parameter]
    public int ProductosEmpacadosId { get; set; }
    public ProductosEmpacados _productoEmpacado { get; set; } = new ProductosEmpacados();
    public List<ProductoDetallesPresentacion> _productoDetallesPresentacionList { get; set; } = new
        List<ProductoDetallesPresentacion>();

    public List<Productos> _productosList { get; set; } = new List<Productos>();

    [Inject]
    public ProductosBLL _productosBLL { get; set; }

    [Inject]
    public ProductosEmpacadosBLL _productosEmpacadosBLL { get; set; }

    public int? _pdpUtilizadoId { get; set; } = 0;
    public int? _producidoId { get; set; } = 0;

    public int _cantidadPdpUtilizado { get; set; }
    public int? _cantidadProducido { get; set; }

    public float? _pesoTotal { get; set; }

    protected override void OnInitialized()
    {
        _productoDetallesPresentacionList = _productosBLL.GetListProductoDetallesPresentacion(x => true);
        _productosList = _productosBLL.GetList(x => true);
        _productoEmpacado.Utilizados = new List<PDPUtilizados>();
        Buscar(ProductosEmpacadosId);
    }
    public void Nuevo()
    {
        this._productoEmpacado = new ProductosEmpacados();
        this._productoEmpacado.Utilizados = new List<PDPUtilizados>();
        this._producidoId = 0;
        this._cantidadProducido = 0;
        this.ProductosEmpacadosId = 0;
        this._pesoTotal = 0;
    }
    public void CalcularPesoTotal()
    {
        var total = 0f;
        foreach (var u in _productoEmpacado.Utilizados)
        {
            var pd = _productosBLL.BuscarProductoDetalle(u.ProductoDetallesId);
            total += (float) ((pd.Producto.Peso * pd.Cantidad) * u.CantidadUtilizada);
            Console.WriteLine("Peso total: ", total);
        }
        _pesoTotal = total;
    }
    public void BuscarClick()
    {

        Buscar(ProductosEmpacadosId);
    }

    public void Buscar(int id)
    {
        if (id > 0)
        {
            var encontrado = _productosEmpacadosBLL.Buscar(id);
            if (encontrado is not null)
            {
                this._productoEmpacado = encontrado;
                Console.WriteLine("Encontrado:\n" + encontrado.Dump() + encontrado.Producido.Dump());
                this._producidoId = encontrado.Producido.ProductoId;
                this._cantidadProducido = encontrado.Producido.Existencia;
                CalcularPesoTotal();
            }
            else
            {
                toastService.ShowError("No se ha encontrado el producto!");
                Nuevo();
            }
        }
        else
        {
            Nuevo();
        }
    }

    public string BuscarProductoDetalleDescripcion(int? id)
    {
        var desc = "";
        try
        {
            var pd = _productosBLL.BuscarProductoDetalle(id);
    // Console.WriteLine($"Producto detalle: {id} \n {pd.Dump()}");
            desc = pd?.Producto?.Descripcion;
        }
        catch (Exception e)
        {
        }
        return desc != null ? desc : "";
    }
    public void Guardar()
    {
        Console.WriteLine("Producto empacado: \n" + _productoEmpacado.Dump());
        if (_productoEmpacado.Utilizados.Count < 1)
        {
            toastService.ShowError("Debe haber por lo menos un producto utilizado");
            return;
        }
        if (_producidoId == null || _producidoId < 1)
        {
            toastService.ShowError("Debe especificar un producto producido");
            return;
        }
        if (_cantidadProducido == null || _cantidadProducido < 1)
        {
            toastService.ShowError("Debe especificar una cantidad de producto producido");
            return;
        }
        if (_cantidadProducido > (_pesoTotal / (_productosBLL.Buscar(_producidoId)?.Peso)))
        {
            toastService.ShowError("La cantidad de producto producido es mayor a la cantidad disponible");
            return;
        }
        _productoEmpacado.Producido = _productosBLL.Buscar(_producidoId);

        ActualizarExistenciaProducido(_cantidadProducido);
        Console.WriteLine("Producto empacado antes de guardar: \n" + _productoEmpacado.Dump() + "\nProducto Detalle: \n" +
                          _productoEmpacado.Producido.Dump() + "\nProducto: \n" + _productoEmpacado.Producido.Dump() + "\n");
        if (_productosEmpacadosBLL.Guardar(_productoEmpacado))
        {
            ActualizarExistencia();
            toastService.ShowSuccess("Guardado con éxito");
        }
        else toastService.ShowError("Ocurrió un error al guardar");
    }

    public void ActualizarExistenciaProducido(int? cantidadProducido)
    {
        var producido = _productosBLL.Buscar(_producidoId);
        if (producido != null)
        {
            producido.Existencia = cantidadProducido;
            producido.ValorInventario = (float) (producido.Costo * producido.Existencia);
            _productoEmpacado.Producido = producido;
            _productosBLL.Guardar(_productoEmpacado.Producido);
        }
    }
    public void ActualizarExistencia(bool incrementar = false)
    {
        foreach (var utilizado in _productoEmpacado.Utilizados)
        {
            var pd = _productosBLL.BuscarProductoDetalle(utilizado.ProductoDetallesId);

            var producto = pd.Producto;
            if (pd.Cantidad != null)
            {
                var existenciaUtilizada = ((int) (utilizado.CantidadUtilizada * pd.Cantidad))!;

                if (incrementar)
                    producto.Existencia += existenciaUtilizada;
                else
                    producto.Existencia -= existenciaUtilizada;
            }
            _productosBLL.Guardar(producto);
        }
    }

    public void Eliminar()
    {
        var id = this._productoEmpacado?.ProductosEmpacadosId;
        if (id != null && id > 0)
        {
            ActualizarExistenciaProducido(0);
            bool eliminado = _productosEmpacadosBLL.Eliminar((int) id);
            if (eliminado)
            {
                ActualizarExistencia(incrementar:true);
                Nuevo();
                toastService.ShowSuccess("Eliminado con éxito");
            }
            else toastService.ShowError("Ocurrió un error al eliminar!");
        }
    }
    public void AgregarUtilizado()
    {
        if (_pdpUtilizadoId != null && _cantidadPdpUtilizado > 0)
        {

    // Busca en el ProductoDetallePresentacion view el producto detalle presentacion utilizado
            var utilizado = _productoDetallesPresentacionList.FirstOrDefault(pdp => pdp.ProductoDetallesId == _pdpUtilizadoId);
            if (utilizado != null)
            {
                if (utilizado.ExistenciaEmpacada < _cantidadPdpUtilizado)
                {
                    toastService.ShowError("La cantidad no puede ser mayor a la existencia");
                    return;
                }
                else
                {
                    var nuevoUtilizado = new PDPUtilizados();
                    nuevoUtilizado.CantidadUtilizada = _cantidadPdpUtilizado;
                    nuevoUtilizado.ProductoDetallesId = utilizado.ProductoDetallesId;
                    _productoEmpacado.Utilizados?.Add(nuevoUtilizado);
                    Console.WriteLine("Nuevo Utilizado: \n" + nuevoUtilizado.Dump());
                }
                _cantidadPdpUtilizado = 0;
                _pdpUtilizadoId = 0;
                CalcularPesoTotal();
            }
        }
        else
        {
            toastService.ShowError("Debe seleccionar un producto y una cantidad");
        }
    }
    public void EliminarUtilizado(PDPUtilizados utilizado)
    {
        _cantidadPdpUtilizado = utilizado.CantidadUtilizada != null ? (int) utilizado.CantidadUtilizada : 0;
        _pdpUtilizadoId = utilizado.ProductoDetallesId;
        _productoEmpacado.Utilizados?.Remove(utilizado);
    }
}